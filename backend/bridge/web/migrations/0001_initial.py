# Generated by Django 5.1.3 on 2024-11-13 07:37

from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Agency',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('agency_name', models.CharField(blank=True, max_length=50, null=True)),
                ('photo_name', models.CharField(blank=True, max_length=200, null=True)),
                ('base64', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'agency',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='BridgeData',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('bid', models.IntegerField()),
                ('sensor', models.IntegerField()),
                ('mid', models.IntegerField(blank=True, null=True)),
                ('createtime', models.DateTimeField()),
                ('health', models.IntegerField(blank=True, null=True)),
                ('seismic', models.FloatField(blank=True, null=True)),
                ('centroid_frequency', models.FloatField(blank=True, null=True)),
                ('bandwidth', models.FloatField(blank=True, null=True)),
                ('cable_force', models.FloatField(blank=True, null=True)),
                ('load_carry_capacity', models.FloatField(blank=True, null=True)),
                ('damping_ratio', models.FloatField(blank=True, null=True)),
                ('frequency_variance', models.FloatField(blank=True, null=True)),
                ('time2', models.BigIntegerField(blank=True, null=True)),
            ],
            options={
                'db_table': 'bridge_data',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='BridgeName',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.CharField(max_length=20)),
                ('bno', models.CharField(blank=True, db_comment='橋梁編號: 同步市政府對外提供之橋梁編號， EX: 桃市府南崁橋 - 300，北市府康樂橋 - D036', max_length=10, null=True)),
                ('name', models.CharField(max_length=20)),
                ('longitude', models.FloatField()),
                ('latitude', models.FloatField()),
                ('address_name', models.CharField(max_length=20)),
                ('id_address_name', models.CharField(max_length=20)),
                ('photo_name', models.CharField(max_length=200)),
                ('base64', models.TextField()),
                ('aid', models.IntegerField()),
                ('deleted', models.IntegerField()),
            ],
            options={
                'db_table': 'bridge_name',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Customer',
            fields=[
                ('id', models.IntegerField(primary_key=True, serialize=False)),
                ('name', models.CharField(blank=True, max_length=50, null=True)),
                ('taxid', models.CharField(blank=True, max_length=50, null=True)),
                ('username', models.CharField(blank=True, max_length=50, null=True)),
                ('password', models.CharField(blank=True, max_length=50, null=True)),
            ],
            options={
                'db_table': 'customer',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='DailyHistoryData',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('bid', models.IntegerField()),
                ('sensor', models.IntegerField()),
                ('mid', models.IntegerField(blank=True, null=True)),
                ('time', models.DateTimeField()),
                ('max_health', models.IntegerField(blank=True, null=True)),
                ('up_health', models.IntegerField(blank=True, null=True)),
                ('mid_health', models.IntegerField(blank=True, null=True)),
                ('down_health', models.IntegerField(blank=True, null=True)),
                ('min_health', models.IntegerField(blank=True, null=True)),
                ('max_seismic', models.FloatField(blank=True, null=True)),
                ('up_seismic', models.FloatField(blank=True, null=True)),
                ('mid_seismic', models.FloatField(blank=True, null=True)),
                ('down_seismic', models.FloatField(blank=True, null=True)),
                ('min_seismic', models.FloatField(blank=True, null=True)),
                ('max_centroid_frequency', models.FloatField(blank=True, null=True)),
                ('up_centroid_frequency', models.FloatField(blank=True, null=True)),
                ('mid_centroid_frequency', models.FloatField(blank=True, null=True)),
                ('down_centroid_frequency', models.FloatField(blank=True, null=True)),
                ('min_centroid_frequency', models.FloatField(blank=True, null=True)),
                ('max_bandwidth', models.FloatField(blank=True, null=True)),
                ('up_bandwidth', models.FloatField(blank=True, null=True)),
                ('mid_bandwidth', models.FloatField(blank=True, null=True)),
                ('down_bandwidth', models.FloatField(blank=True, null=True)),
                ('min_bandwidth', models.FloatField(blank=True, null=True)),
                ('max_cable_force', models.FloatField(blank=True, null=True)),
                ('up_cable_force', models.FloatField(blank=True, null=True)),
                ('mid_cable_force', models.FloatField(blank=True, null=True)),
                ('down_cable_force', models.FloatField(blank=True, null=True)),
                ('min_cable_force', models.FloatField(blank=True, null=True)),
                ('max_load_carry_capacity', models.FloatField(blank=True, null=True)),
                ('up_load_carry_capacity', models.FloatField(blank=True, null=True)),
                ('mid_load_carry_capacity', models.FloatField(blank=True, null=True)),
                ('down_load_carry_capacity', models.FloatField(blank=True, null=True)),
                ('min_load_carry_capacity', models.FloatField(blank=True, null=True)),
                ('max_damping_ratio', models.FloatField(blank=True, null=True)),
                ('up_damping_ratio', models.FloatField(blank=True, null=True)),
                ('mid_damping_ratio', models.FloatField(blank=True, null=True)),
                ('down_damping_ratio', models.FloatField(blank=True, null=True)),
                ('min_damping_ratio', models.FloatField(blank=True, null=True)),
                ('max_frequency_variance', models.FloatField(blank=True, null=True)),
                ('up_frequency_variance', models.FloatField(blank=True, null=True)),
                ('mid_frequency_variance', models.FloatField(blank=True, null=True)),
                ('down_frequency_variance', models.FloatField(blank=True, null=True)),
                ('min_frequency_variance', models.FloatField(blank=True, null=True)),
            ],
            options={
                'db_table': 'daily_history_data',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='DataOrigin',
            fields=[
                ('stid', models.IntegerField(primary_key=True, serialize=False)),
                ('sid', models.IntegerField()),
                ('mid', models.IntegerField(blank=True, null=True)),
                ('createtime', models.DateTimeField()),
                ('health', models.IntegerField(blank=True, null=True)),
                ('seismic', models.FloatField(blank=True, null=True)),
                ('centroid_frequency', models.FloatField(blank=True, null=True)),
                ('bandwidth', models.FloatField(blank=True, null=True)),
                ('cable_force', models.FloatField(blank=True, null=True)),
                ('load_carry_capacity', models.FloatField(blank=True, null=True)),
                ('damping_ratio', models.FloatField(blank=True, null=True)),
                ('frequency_variance', models.FloatField(blank=True, null=True)),
                ('time2', models.BigIntegerField(blank=True, null=True)),
            ],
            options={
                'db_table': 'data_origin',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='EarthquakeEvent',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('bid', models.IntegerField()),
                ('sensor', models.IntegerField()),
                ('mid', models.IntegerField(blank=True, null=True)),
                ('event_id', models.IntegerField()),
                ('time_marker', models.CharField(max_length=10)),
                ('start_time', models.DateTimeField(blank=True, null=True)),
                ('end_time', models.DateTimeField(blank=True, null=True)),
                ('max_health', models.IntegerField(blank=True, null=True)),
                ('up_health', models.IntegerField(blank=True, null=True)),
                ('mid_health', models.IntegerField(blank=True, null=True)),
                ('down_health', models.IntegerField(blank=True, null=True)),
                ('min_health', models.IntegerField(blank=True, null=True)),
                ('max_seismic', models.FloatField(blank=True, null=True)),
                ('up_seismic', models.FloatField(blank=True, null=True)),
                ('mid_seismic', models.FloatField(blank=True, null=True)),
                ('down_seismic', models.FloatField(blank=True, null=True)),
                ('min_seismic', models.FloatField(blank=True, null=True)),
                ('max_centroid_frequency', models.FloatField(blank=True, null=True)),
                ('up_centroid_frequency', models.FloatField(blank=True, null=True)),
                ('mid_centroid_frequency', models.FloatField(blank=True, null=True)),
                ('down_centroid_frequency', models.FloatField(blank=True, null=True)),
                ('min_centroid_frequency', models.FloatField(blank=True, null=True)),
                ('max_bandwidth', models.FloatField(blank=True, null=True)),
                ('up_bandwidth', models.FloatField(blank=True, null=True)),
                ('mid_bandwidth', models.FloatField(blank=True, null=True)),
                ('down_bandwidth', models.FloatField(blank=True, null=True)),
                ('min_bandwidth', models.FloatField(blank=True, null=True)),
                ('max_cable_force', models.FloatField(blank=True, null=True)),
                ('up_cable_force', models.FloatField(blank=True, null=True)),
                ('mid_cable_force', models.FloatField(blank=True, null=True)),
                ('down_cable_force', models.FloatField(blank=True, null=True)),
                ('min_cable_force', models.FloatField(blank=True, null=True)),
                ('max_load_carry_capacity', models.FloatField(blank=True, null=True)),
                ('up_load_carry_capacity', models.FloatField(blank=True, null=True)),
                ('mid_load_carry_capacity', models.FloatField(blank=True, null=True)),
                ('down_load_carry_capacity', models.FloatField(blank=True, null=True)),
                ('min_load_carry_capacity', models.FloatField(blank=True, null=True)),
                ('max_damping_ratio', models.FloatField(blank=True, null=True)),
                ('up_damping_ratio', models.FloatField(blank=True, null=True)),
                ('mid_damping_ratio', models.FloatField(blank=True, null=True)),
                ('down_damping_ratio', models.FloatField(blank=True, null=True)),
                ('min_damping_ratio', models.FloatField(blank=True, null=True)),
                ('max_frequency_variance', models.FloatField(blank=True, null=True)),
                ('up_frequency_variance', models.FloatField(blank=True, null=True)),
                ('mid_frequency_variance', models.FloatField(blank=True, null=True)),
                ('down_frequency_variance', models.FloatField(blank=True, null=True)),
                ('min_frequency_variance', models.FloatField(blank=True, null=True)),
            ],
            options={
                'db_table': 'earthquake_event',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Employee',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(db_comment='員工編號', max_length=50)),
                ('taxid', models.CharField(max_length=50)),
            ],
            options={
                'db_table': 'employee',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='FinalFloodResistance',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('freq_var_ratio', models.FloatField(blank=True, null=True)),
                ('health_var_ratio', models.FloatField(blank=True, null=True)),
                ('cable_force_var_ratio', models.FloatField(blank=True, null=True)),
                ('load_carry_capacity_var_ratio', models.FloatField(blank=True, null=True)),
                ('post_event_health', models.FloatField(blank=True, null=True)),
            ],
            options={
                'db_table': 'final_flood_resistance',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='FinalSeismicResistance',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('freq_var_ratio', models.FloatField(blank=True, null=True)),
                ('health_var_ratio', models.FloatField(blank=True, null=True)),
                ('cable_force_var_ratio', models.FloatField(blank=True, null=True)),
                ('load_carry_capacity_var_ratio', models.FloatField(blank=True, null=True)),
                ('post_event_health', models.FloatField(blank=True, null=True)),
            ],
            options={
                'db_table': 'final_seismic_resistance',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Mearthquake',
            fields=[
                ('earthquakeno', models.IntegerField(primary_key=True, serialize=False)),
                ('reportcolor', models.CharField(blank=True, max_length=10, null=True)),
                ('origintime', models.DateTimeField(blank=True, null=True)),
                ('reportcontent', models.CharField(blank=True, max_length=200, null=True)),
                ('reportimageuri', models.CharField(blank=True, max_length=200, null=True)),
                ('epicenterlocation', models.CharField(blank=True, db_column='epiCenterlocation', max_length=50, null=True)),
                ('magnitudetype', models.CharField(blank=True, max_length=10, null=True)),
                ('magnitudevalue', models.FloatField(blank=True, null=True)),
                ('shakemapimageuri', models.CharField(blank=True, max_length=200, null=True)),
                ('depthvalue', models.FloatField(blank=True, null=True)),
                ('depthtype', models.CharField(blank=True, max_length=10, null=True)),
            ],
            options={
                'db_table': 'mearthquake',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='MinuteHistoryData',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('bid', models.IntegerField()),
                ('sensor', models.IntegerField()),
                ('mid', models.IntegerField(blank=True, null=True)),
                ('time', models.DateTimeField()),
                ('max_health', models.IntegerField(blank=True, null=True)),
                ('up_health', models.IntegerField(blank=True, null=True)),
                ('mid_health', models.IntegerField(blank=True, null=True)),
                ('down_health', models.IntegerField(blank=True, null=True)),
                ('min_health', models.IntegerField(blank=True, null=True)),
                ('max_seismic', models.FloatField(blank=True, null=True)),
                ('up_seismic', models.FloatField(blank=True, null=True)),
                ('mid_seismic', models.FloatField(blank=True, null=True)),
                ('down_seismic', models.FloatField(blank=True, null=True)),
                ('min_seismic', models.FloatField(blank=True, null=True)),
                ('max_centroid_frequency', models.FloatField(blank=True, null=True)),
                ('up_centroid_frequency', models.FloatField(blank=True, null=True)),
                ('mid_centroid_frequency', models.FloatField(blank=True, null=True)),
                ('down_centroid_frequency', models.FloatField(blank=True, null=True)),
                ('min_centroid_frequency', models.FloatField(blank=True, null=True)),
                ('max_bandwidth', models.FloatField(blank=True, null=True)),
                ('up_bandwidth', models.FloatField(blank=True, null=True)),
                ('mid_bandwidth', models.FloatField(blank=True, null=True)),
                ('down_bandwidth', models.FloatField(blank=True, null=True)),
                ('min_bandwidth', models.FloatField(blank=True, null=True)),
                ('max_cable_force', models.FloatField(blank=True, null=True)),
                ('up_cable_force', models.FloatField(blank=True, null=True)),
                ('mid_cable_force', models.FloatField(blank=True, null=True)),
                ('down_cable_force', models.FloatField(blank=True, null=True)),
                ('min_cable_force', models.FloatField(blank=True, null=True)),
                ('max_load_carry_capacity', models.FloatField(blank=True, null=True)),
                ('up_load_carry_capacity', models.FloatField(blank=True, null=True)),
                ('mid_load_carry_capacity', models.FloatField(blank=True, null=True)),
                ('down_load_carry_capacity', models.FloatField(blank=True, null=True)),
                ('min_load_carry_capacity', models.FloatField(blank=True, null=True)),
                ('max_damping_ratio', models.FloatField(blank=True, null=True)),
                ('up_damping_ratio', models.FloatField(blank=True, null=True)),
                ('mid_damping_ratio', models.FloatField(blank=True, null=True)),
                ('down_damping_ratio', models.FloatField(blank=True, null=True)),
                ('min_damping_ratio', models.FloatField(blank=True, null=True)),
                ('max_frequency_variance', models.FloatField(blank=True, null=True)),
                ('up_frequency_variance', models.FloatField(blank=True, null=True)),
                ('mid_frequency_variance', models.FloatField(blank=True, null=True)),
                ('down_frequency_variance', models.FloatField(blank=True, null=True)),
                ('min_frequency_variance', models.FloatField(blank=True, null=True)),
            ],
            options={
                'db_table': 'minute_history_data',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Model',
            fields=[
                ('id', models.IntegerField(primary_key=True, serialize=False)),
                ('name', models.CharField(blank=True, max_length=20, null=True)),
            ],
            options={
                'db_table': 'model',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='QuartileData',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('bid', models.IntegerField()),
                ('sensor', models.IntegerField()),
                ('time', models.DateTimeField()),
                ('max_health', models.IntegerField(blank=True, null=True)),
                ('up_health', models.IntegerField(blank=True, null=True)),
                ('mid_health', models.IntegerField(blank=True, null=True)),
                ('down_health', models.IntegerField(blank=True, null=True)),
                ('min_health', models.IntegerField(blank=True, null=True)),
                ('max_seismic', models.FloatField(blank=True, null=True)),
                ('up_seismic', models.FloatField(blank=True, null=True)),
                ('mid_seismic', models.FloatField(blank=True, null=True)),
                ('down_seismic', models.FloatField(blank=True, null=True)),
                ('min_seismic', models.FloatField(blank=True, null=True)),
                ('max_centroid_frequency', models.FloatField(blank=True, null=True)),
                ('up_centroid_frequency', models.FloatField(blank=True, null=True)),
                ('mid_centroid_frequency', models.FloatField(blank=True, null=True)),
                ('down_centroid_frequency', models.FloatField(blank=True, null=True)),
                ('min_centroid_frequency', models.FloatField(blank=True, null=True)),
                ('max_bandwidth', models.FloatField(blank=True, null=True)),
                ('up_bandwidth', models.FloatField(blank=True, null=True)),
                ('mid_bandwidth', models.FloatField(blank=True, null=True)),
                ('down_bandwidth', models.FloatField(blank=True, null=True)),
                ('min_bandwidth', models.FloatField(blank=True, null=True)),
                ('max_cable_force', models.FloatField(blank=True, null=True)),
                ('up_cable_force', models.FloatField(blank=True, null=True)),
                ('mid_cable_force', models.FloatField(blank=True, null=True)),
                ('down_cable_force', models.FloatField(blank=True, null=True)),
                ('min_cable_force', models.FloatField(blank=True, null=True)),
                ('max_load_carry_capacity', models.FloatField(blank=True, null=True)),
                ('up_load_carry_capacity', models.FloatField(blank=True, null=True)),
                ('mid_load_carry_capacity', models.FloatField(blank=True, null=True)),
                ('down_load_carry_capacity', models.FloatField(blank=True, null=True)),
                ('min_load_carry_capacity', models.FloatField(blank=True, null=True)),
                ('max_damping_ratio', models.FloatField(blank=True, null=True)),
                ('up_damping_ratio', models.FloatField(blank=True, null=True)),
                ('mid_damping_ratio', models.FloatField(blank=True, null=True)),
                ('down_damping_ratio', models.FloatField(blank=True, null=True)),
                ('min_damping_ratio', models.FloatField(blank=True, null=True)),
                ('max_frequency_variance', models.FloatField(blank=True, null=True)),
                ('up_frequency_variance', models.FloatField(blank=True, null=True)),
                ('mid_frequency_variance', models.FloatField(blank=True, null=True)),
                ('down_frequency_variance', models.FloatField(blank=True, null=True)),
                ('min_frequency_variance', models.FloatField(blank=True, null=True)),
            ],
            options={
                'db_table': 'quartile_data',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='SensorName',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('sensor', models.IntegerField()),
                ('type', models.CharField(blank=True, max_length=20, null=True)),
                ('ip', models.IntegerField(blank=True, null=True)),
                ('sensor_location', models.CharField(blank=True, max_length=20, null=True)),
                ('detailed_location', models.CharField(blank=True, max_length=20, null=True)),
                ('cable_mass_per_length', models.FloatField(blank=True, null=True)),
                ('cable_length', models.FloatField(blank=True, null=True)),
                ('e', models.FloatField(blank=True, db_column='E', null=True)),
                ('i', models.FloatField(blank=True, db_column='I', null=True)),
                ('m', models.FloatField(blank=True, null=True)),
                ('health_alert_index', models.IntegerField(blank=True, null=True)),
                ('health_move_index', models.IntegerField(blank=True, null=True)),
                ('event_alert_index', models.IntegerField(blank=True, null=True)),
                ('event_move_index', models.IntegerField(blank=True, null=True)),
                ('cable_force_alert_index', models.IntegerField(blank=True, null=True)),
                ('cable_force_move_index', models.IntegerField(blank=True, null=True)),
                ('load_carry_capacity_alert_index', models.FloatField(blank=True, null=True)),
                ('load_carry_capacity_move_index', models.FloatField(blank=True, null=True)),
                ('effective_pier_length_alert_index', models.FloatField(blank=True, null=True)),
                ('effective_pier_length_move_index', models.FloatField(blank=True, null=True)),
                ('f_var_ref', models.FloatField(blank=True, null=True)),
                ('current_status', models.IntegerField(blank=True, null=True)),
            ],
            options={
                'db_table': 'sensor_name',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='TyphoonData',
            fields=[
                ('id', models.IntegerField(primary_key=True, serialize=False)),
                ('cht_name', models.CharField(blank=True, max_length=10, null=True)),
                ('eng_name', models.CharField(blank=True, max_length=50, null=True)),
                ('sea_start_datetime', models.DateTimeField(blank=True, null=True)),
                ('max_intensity', models.CharField(blank=True, max_length=3, null=True)),
                ('sea_end_datetime', models.DateTimeField(blank=True, null=True)),
                ('warning_count', models.IntegerField(blank=True, null=True)),
            ],
            options={
                'db_table': 'typhoon_data',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='TyphoonEvent',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('bid', models.IntegerField()),
                ('sensor', models.IntegerField()),
                ('mid', models.IntegerField(blank=True, null=True)),
                ('event_id', models.IntegerField()),
                ('time_marker', models.CharField(max_length=10)),
                ('start_time', models.DateTimeField(blank=True, null=True)),
                ('end_time', models.DateTimeField(blank=True, null=True)),
                ('max_health', models.IntegerField(blank=True, null=True)),
                ('up_health', models.IntegerField(blank=True, null=True)),
                ('mid_health', models.IntegerField(blank=True, null=True)),
                ('down_health', models.IntegerField(blank=True, null=True)),
                ('min_health', models.IntegerField(blank=True, null=True)),
                ('max_seismic', models.FloatField(blank=True, null=True)),
                ('up_seismic', models.FloatField(blank=True, null=True)),
                ('mid_seismic', models.FloatField(blank=True, null=True)),
                ('down_seismic', models.FloatField(blank=True, null=True)),
                ('min_seismic', models.FloatField(blank=True, null=True)),
                ('max_centroid_frequency', models.FloatField(blank=True, null=True)),
                ('up_centroid_frequency', models.FloatField(blank=True, null=True)),
                ('mid_centroid_frequency', models.FloatField(blank=True, null=True)),
                ('down_centroid_frequency', models.FloatField(blank=True, null=True)),
                ('min_centroid_frequency', models.FloatField(blank=True, null=True)),
                ('max_bandwidth', models.FloatField(blank=True, null=True)),
                ('up_bandwidth', models.FloatField(blank=True, null=True)),
                ('mid_bandwidth', models.FloatField(blank=True, null=True)),
                ('down_bandwidth', models.FloatField(blank=True, null=True)),
                ('min_bandwidth', models.FloatField(blank=True, null=True)),
                ('max_cable_force', models.FloatField(blank=True, null=True)),
                ('up_cable_force', models.FloatField(blank=True, null=True)),
                ('mid_cable_force', models.FloatField(blank=True, null=True)),
                ('down_cable_force', models.FloatField(blank=True, null=True)),
                ('min_cable_force', models.FloatField(blank=True, null=True)),
                ('max_load_carry_capacity', models.FloatField(blank=True, null=True)),
                ('up_load_carry_capacity', models.FloatField(blank=True, null=True)),
                ('mid_load_carry_capacity', models.FloatField(blank=True, null=True)),
                ('down_load_carry_capacity', models.FloatField(blank=True, null=True)),
                ('min_load_carry_capacity', models.FloatField(blank=True, null=True)),
                ('max_damping_ratio', models.FloatField(blank=True, null=True)),
                ('up_damping_ratio', models.FloatField(blank=True, null=True)),
                ('mid_damping_ratio', models.FloatField(blank=True, null=True)),
                ('down_damping_ratio', models.FloatField(blank=True, null=True)),
                ('min_damping_ratio', models.FloatField(blank=True, null=True)),
                ('max_frequency_variance', models.FloatField(blank=True, null=True)),
                ('up_frequency_variance', models.FloatField(blank=True, null=True)),
                ('mid_frequency_variance', models.FloatField(blank=True, null=True)),
                ('down_frequency_variance', models.FloatField(blank=True, null=True)),
                ('min_frequency_variance', models.FloatField(blank=True, null=True)),
            ],
            options={
                'db_table': 'typhoon_event',
                'managed': False,
            },
        ),
    ]
